<resources>
    <string name="app_name">搜钱</string>

    <string name="net_unusable">网络不可用!</string>
    <!--登录、注册、忘记密码-->
    <string name="input_phone_num">输入手机号</string>
    <string name="get_verify_code">获取验证码</string>
    <string name="input_verify_code">输入验证码</string>
    <string name="input_pwd">输入密码</string>
    <string name="input_confirm_pwd">确认密码</string>
    <string name="forget_pwd">忘记密码</string>
    <string name="new_user">新用户</string>
    <string name="login_with_other_platform">其他账号登录</string>
    <string name="login">登录</string>
    <string name="register">注册</string>
    <string name="confirm">确认</string>

    <!--主界面-->
    <string name="recommend">推荐</string>
    <string name="find_money">找钱</string>
    <string name="money_friendship">钱圈</string>

    <!--圈钱-->
    <string name="search">搜索</string>

    <!--个人中心-->
    <string name="personal_find">我的搜搜</string>
    <string name="my_friend">我的好友</string>
    <string name="qr_scan">扫一扫</string>
    <string name="coin_total_count">币总数</string>
    <string name="recommend_count_down">限时推荐</string>
    <string name="recommend_daily">每日推荐</string>
    <string name="focus_shop">关注店铺</string>
    <string name="settings">设置</string>

    <!--扫码-->
    <string name="qr_scan_title">扫码</string>

        <string name="my_txt">

        程序计数器

程序计数器是线程私有的区域，很好理解嘛~，每个线程当然得有个计数器记录当前执行到那个指令。占用的内存空间小，可以把它看成是当前线程所执行的字节码的行号指示器。如果线程在执行Java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址；如果执行的是Native方法，这个计数器的值为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。
Java虚拟机栈

与程序计数器一样，Java虚拟机栈也是线程私有的。其生命周期与线程相同。如何理解虚拟机栈呢？本质上来讲，就是个栈。里面存放的元素叫栈帧，栈帧好像很复杂的样子，其实它很简单！它里面存放的是一个函数的上下文，具体存放的是执行的函数的一些数据。执行的函数需要的数据无非就是局部变量表（保存函数内部的变量）、操作数栈（执行引擎计算时需要），方法出口等等。

执行引擎每调用一个函数时，就为这个函数创建一个栈帧，并加入虚拟机栈。换个角度理解，每个函数从调用到执行结束，其实是对应一个栈帧的入栈和出栈。

注意这个区域可能出现的两种异常：一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，如何制作虚拟机栈OOM呢，参考一下代码：

    </string>
</resources>
